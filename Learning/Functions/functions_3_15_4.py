# –£—Ä–æ–∫ 15.4
# –§—É–Ω–∫—Ü–∏–∏, –∫–∞–∫ –∑–∞–º–µ–Ω–∞ –¥–ª–∏–Ω–Ω—ã–º if...elif
# –§—É–Ω–∫—Ü–∏–∏, –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π
# def hello():
#     print('Hello from function')
# print(type(hello))
#
# writeln = print            # –∫–∞–∫ –≤ —è–∑—ã–∫–µ Pascal üòÄ
# writeln('Hello world!')
# writeln('Python')
#
# def start():
#     # —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ start
#     pass
# def stop():
#     # —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ stop
#     pass
# def pause():
#     # —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ pause
#     pass
# commands = {'start': start, 'stop': stop, 'pause': pause}  # —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–º–∞–Ω–¥–∞ ‚Üí —Ñ—É–Ω–∫—Ü–∏—è
# command = input()  # —Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
# commands[command]()  # –≤—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å –ø–æ –∫–ª—é—á—É
#
# –§—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
# –û–ø—Ä–µ–¥–µ–ª–∏–º —Ñ—É–Ω–∫—Ü–∏—é plot(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
# f ‚Äì —Ñ—É–Ω–∫—Ü–∏—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫,
# –∏ a, b ‚Äì –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.
# def plot(f, a, b):
# def square_add_one(x):
#     return x * x + 1
# def cube_add_square(x):
#     return x ** 3 + x ** 2
# plot(square_add_one, 1, 10)
# plot(cube_add_square, -10, 10)

numbers = [10, -7, 8, -100, -50, 32, 87, 117, -210]

print(max(numbers))
print(min(numbers))
print(sorted(numbers))

numbers = [10, -7, 8, -100, -50, 32, 87, 117, -210]

print(max(numbers, key=abs))  # —É–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é abs –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞
print(min(numbers, key=abs))  # —É–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é abs –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞
print(sorted(numbers, key=abs))  # —É–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é abs –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞

points = [(1, -1), (2, 3), (-10, 15), (10, 9), (7, 18), (1, 5), (2, -4)]
points.sort()  # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –Ω–∞ –º–µ—Å—Ç–µ
print(points)


def compare_by_second(point):
    return point[1]


def compare_by_sum(point):
    return point[0] + point[1]


points = [(1, -1), (2, 3), (-10, 15), (10, 9), (7, 18), (1, 5), (2, -4)]

print(sorted(points, key=compare_by_second))  # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ç–æ—Ä–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∫–æ—Ä—Ç–µ–∂–∞
print(sorted(points, key=compare_by_sum))  # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ –∫–æ—Ä—Ç–µ–∂–∞


# –§—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π


def generator():
    def hello():
        print('Hello from function!')

    return hello


func = generator()
func()


def generator_square_polynom(a, b, c):
    def square_polynom(x):
        return a*x**2 + b*x + c
    return square_polynom


f = generator_square_polynom(a=1, b=2, c=1)
g = generator_square_polynom(a=2, b=0, c=-3)
h = generator_square_polynom(a=-3, b=-10, c=50)

print(f(1))
print(g(2))
print(h(-1))


def comparator(item):
    return item[0]


data = [('red', 1), ('blue', 2), ('green', 5), ('blue', 1)]
data.sort(key=comparator)   # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –ø–æ–ª—é

print(data)